// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/order.go
//
// Generated by this command:
//
//	mockgen --source=./internal/service/order.go --destination=./internal/service/mocks/order_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/orders_api/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceOrder is a mock of ServiceOrder interface.
type MockServiceOrder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOrderMockRecorder
	isgomock struct{}
}

// MockServiceOrderMockRecorder is the mock recorder for MockServiceOrder.
type MockServiceOrderMockRecorder struct {
	mock *MockServiceOrder
}

// NewMockServiceOrder creates a new mock instance.
func NewMockServiceOrder(ctrl *gomock.Controller) *MockServiceOrder {
	mock := &MockServiceOrder{ctrl: ctrl}
	mock.recorder = &MockServiceOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOrder) EXPECT() *MockServiceOrderMockRecorder {
	return m.recorder
}

// GetOrderByUID mocks base method.
func (m *MockServiceOrder) GetOrderByUID(id string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByUID", id)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByUID indicates an expected call of GetOrderByUID.
func (mr *MockServiceOrderMockRecorder) GetOrderByUID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByUID", reflect.TypeOf((*MockServiceOrder)(nil).GetOrderByUID), id)
}

// Recover mocks base method.
func (m *MockServiceOrder) Recover() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover")
	ret0, _ := ret[0].(error)
	return ret0
}

// Recover indicates an expected call of Recover.
func (mr *MockServiceOrderMockRecorder) Recover() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockServiceOrder)(nil).Recover))
}

// SetOrder mocks base method.
func (m *MockServiceOrder) SetOrder(order *models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrder", order)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOrder indicates an expected call of SetOrder.
func (mr *MockServiceOrderMockRecorder) SetOrder(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrder", reflect.TypeOf((*MockServiceOrder)(nil).SetOrder), order)
}
